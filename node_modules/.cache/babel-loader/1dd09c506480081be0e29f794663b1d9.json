{"ast":null,"code":"var _jsxFileName = \"/Users/SWT/Desktop/test_shop_crud_copy/test_shop_crud_methods/src/components/PaymentDetails/index.js\";\nimport React, { useState, useEffect } from 'react';\nimport { CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\nimport FormInput from './../forms/FormInput';\nimport Button from './../forms/Button';\nimport { CountryDropdown } from 'react-country-region-selector';\nimport { apiInstance } from './../../Utils';\nimport { selectCartTotal, selectCartItemsCount, selectCartItems } from './../../redux/Cart/cart.selectors';\nimport { saveOrderHistory } from './../../redux/Orders/orders.actions';\nimport { clearCart } from './../../redux/Cart/cart.actions';\nimport { createStructuredSelector } from 'reselect';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport './styles.scss';\nconst initialAddressState = {\n  line1: '',\n  line2: '',\n  city: '',\n  state: '',\n  postal_code: '',\n  country: ''\n};\nconst mapState = createStructuredSelector({\n  total: selectCartTotal,\n  itemCount: selectCartItemsCount,\n  cartItems: selectCartItems\n});\n\nconst PaymentDetails = () => {\n  const stripe = useStripe();\n  const elements = useElements();\n  const history = useHistory();\n  const {\n    total,\n    itemCount,\n    cartItems\n  } = useSelector(mapState);\n  const dispatch = useDispatch();\n  const [billingAddress, setBillingAddress] = useState({ ...initialAddressState\n  });\n  const [shippingAddress, setShippingAddress] = useState({ ...initialAddressState\n  });\n  const [recipientName, setRecipientName] = useState('');\n  const [nameOnCard, setNameOnCard] = useState('');\n  useEffect(() => {\n    if (itemCount < 1) {\n      history.push('/dashboard');\n    }\n  }, [itemCount]);\n\n  const handleShipping = evt => {\n    const {\n      name,\n      value\n    } = evt.target;\n    setShippingAddress({ ...shippingAddress,\n      [name]: value\n    });\n  };\n\n  const handleBilling = evt => {\n    const {\n      name,\n      value\n    } = evt.target;\n    setBillingAddress({ ...billingAddress,\n      [name]: value\n    });\n  };\n\n  const handleFormSubmit = async evt => {\n    evt.preventDefault();\n    const cardElement = elements.getElement('card');\n\n    if (!shippingAddress.line1 || !shippingAddress.city || !shippingAddress.state || !shippingAddress.postal_code || !shippingAddress.country || !billingAddress.line1 || !billingAddress.city || !billingAddress.state || !billingAddress.postal_code || !billingAddress.country || !recipientName || !nameOnCard) {\n      return;\n    }\n\n    apiInstance.post('/payments/create', {\n      amount: total * 100,\n      shipping: {\n        name: recipientName,\n        address: { ...shippingAddress\n        }\n      }\n    }).then(_ref => {\n      let {\n        data: clientSecret\n      } = _ref;\n      stripe.createPaymentMethod({\n        type: 'card',\n        card: cardElement,\n        billing_details: {\n          name: nameOnCard,\n          address: { ...billingAddress\n          }\n        }\n      }).then(_ref2 => {\n        let {\n          paymentMethod\n        } = _ref2;\n        stripe.confirmCardPayment(clientSecret, {\n          payment_method: paymentMethod.id\n        }).then(_ref3 => {\n          let {\n            paymentIntent\n          } = _ref3;\n          const configOrder = {\n            orderTotal: total,\n            orderItems: cartItems.map(item => {\n              const {\n                documentID,\n                productThumbnail,\n                productName,\n                productPrice,\n                quantity\n              } = item;\n              return {\n                documentID,\n                productThumbnail,\n                productName,\n                productPrice,\n                quantity\n              };\n            })\n          };\n          dispatch(saveOrderHistory(configOrder));\n        });\n      });\n    });\n  };\n\n  const configCardElement = {\n    iconStyle: 'solid',\n    style: {\n      base: {\n        fontSize: '16px'\n      }\n    },\n    hidePostalCode: true\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"paymentDetails\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleFormSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 11\n    }\n  }, \"Shipping Address\"), /*#__PURE__*/React.createElement(FormInput, {\n    required: true,\n    placeholder: \"Recipient Name\",\n    name: \"recipientName\",\n    handleChange: evt => setRecipientName(evt.target.value),\n    value: recipientName,\n    type: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(FormInput, {\n    required: true,\n    placeholder: \"Line 1\",\n    name: \"line1\",\n    handleChange: evt => handleShipping(evt),\n    value: shippingAddress.line1,\n    type: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(FormInput, {\n    placeholder: \"Line 2\",\n    name: \"line2\",\n    handleChange: evt => handleShipping(evt),\n    value: shippingAddress.line2,\n    type: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(FormInput, {\n    required: true,\n    placeholder: \"City\",\n    name: \"city\",\n    handleChange: evt => handleShipping(evt),\n    value: shippingAddress.city,\n    type: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(FormInput, {\n    required: true,\n    placeholder: \"State\",\n    name: \"state\",\n    handleChange: evt => handleShipping(evt),\n    value: shippingAddress.state,\n    type: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(FormInput, {\n    required: true,\n    placeholder: \"Postal Code\",\n    name: \"postal_code\",\n    handleChange: evt => handleShipping(evt),\n    value: shippingAddress.postal_code,\n    type: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"formRow checkoutInput\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(CountryDropdown, {\n    required: true,\n    onChange: val => handleShipping({\n      target: {\n        name: 'country',\n        value: val\n      }\n    }),\n    value: shippingAddress.country,\n    valueType: \"short\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 11\n    }\n  }, \"Billing Address\"), /*#__PURE__*/React.createElement(FormInput, {\n    required: true,\n    placeholder: \"Name on Card\",\n    name: \"nameOnCard\",\n    handleChange: evt => setNameOnCard(evt.target.value),\n    value: nameOnCard,\n    type: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(FormInput, {\n    required: true,\n    placeholder: \"Line 1\",\n    name: \"line1\",\n    handleChange: evt => handleBilling(evt),\n    value: billingAddress.line1,\n    type: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(FormInput, {\n    placeholder: \"Line 2\",\n    name: \"line2\",\n    handleChange: evt => handleBilling(evt),\n    value: billingAddress.line2,\n    type: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(FormInput, {\n    required: true,\n    placeholder: \"City\",\n    name: \"city\",\n    handleChange: evt => handleBilling(evt),\n    value: billingAddress.city,\n    type: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(FormInput, {\n    required: true,\n    placeholder: \"State\",\n    name: \"state\",\n    handleChange: evt => handleBilling(evt),\n    value: billingAddress.state,\n    type: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(FormInput, {\n    required: true,\n    placeholder: \"Postal Code\",\n    name: \"postal_code\",\n    handleChange: evt => handleBilling(evt),\n    value: billingAddress.postal_code,\n    type: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"formRow checkoutInput\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(CountryDropdown, {\n    required: true,\n    onChange: val => handleBilling({\n      target: {\n        name: 'country',\n        value: val\n      }\n    }),\n    value: billingAddress.country,\n    valueType: \"short\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 11\n    }\n  }, \"Card Details\"), /*#__PURE__*/React.createElement(CardElement, {\n    options: configCardElement,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 9\n    }\n  }, \"Pay Now\")));\n};\n\nexport default PaymentDetails;","map":{"version":3,"sources":["/Users/SWT/Desktop/test_shop_crud_copy/test_shop_crud_methods/src/components/PaymentDetails/index.js"],"names":["React","useState","useEffect","CardElement","useStripe","useElements","FormInput","Button","CountryDropdown","apiInstance","selectCartTotal","selectCartItemsCount","selectCartItems","saveOrderHistory","clearCart","createStructuredSelector","useSelector","useDispatch","useHistory","initialAddressState","line1","line2","city","state","postal_code","country","mapState","total","itemCount","cartItems","PaymentDetails","stripe","elements","history","dispatch","billingAddress","setBillingAddress","shippingAddress","setShippingAddress","recipientName","setRecipientName","nameOnCard","setNameOnCard","push","handleShipping","evt","name","value","target","handleBilling","handleFormSubmit","preventDefault","cardElement","getElement","post","amount","shipping","address","then","data","clientSecret","createPaymentMethod","type","card","billing_details","paymentMethod","confirmCardPayment","payment_method","id","paymentIntent","configOrder","orderTotal","orderItems","map","item","documentID","productThumbnail","productName","productPrice","quantity","configCardElement","iconStyle","style","base","fontSize","hidePostalCode","val"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\nimport FormInput from './../forms/FormInput';\nimport Button from './../forms/Button';\nimport { CountryDropdown } from 'react-country-region-selector';\nimport { apiInstance } from './../../Utils';\nimport { selectCartTotal, selectCartItemsCount, selectCartItems } from './../../redux/Cart/cart.selectors';\nimport { saveOrderHistory } from './../../redux/Orders/orders.actions';\nimport { clearCart } from './../../redux/Cart/cart.actions';\nimport { createStructuredSelector } from 'reselect';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport './styles.scss';\n\nconst initialAddressState = {\n  line1: '',\n  line2: '',\n  city: '',\n  state: '',\n  postal_code: '',\n  country: '',\n};\n\nconst mapState = createStructuredSelector({\n  total: selectCartTotal,\n  itemCount: selectCartItemsCount,\n  cartItems: selectCartItems,\n});\n\nconst PaymentDetails = () => {\n  const stripe = useStripe();\n  const elements = useElements();\n  const history = useHistory();\n  const { total, itemCount, cartItems } = useSelector(mapState);\n  const dispatch = useDispatch();\n  const [billingAddress, setBillingAddress] = useState({ ...initialAddressState });\n  const [shippingAddress, setShippingAddress] = useState({ ...initialAddressState });\n  const [recipientName, setRecipientName] = useState('');\n  const [nameOnCard, setNameOnCard] = useState('');\n\n  useEffect(() => {\n    if (itemCount < 1) {\n      history.push('/dashboard');\n    }\n\n  }, [itemCount]);\n\n  const handleShipping = evt => {\n    const { name, value } = evt.target;\n    setShippingAddress({\n      ...shippingAddress,\n      [name]: value\n    });\n  };\n\n  const handleBilling = evt => {\n    const { name, value } = evt.target;\n    setBillingAddress({\n      ...billingAddress,\n      [name]: value\n    });\n  }\n\n  const handleFormSubmit = async evt => {\n    evt.preventDefault();\n    const cardElement = elements.getElement('card');\n\n    if (\n      !shippingAddress.line1 || !shippingAddress.city ||\n      !shippingAddress.state || !shippingAddress.postal_code ||\n      !shippingAddress.country || !billingAddress.line1 ||\n      !billingAddress.city || !billingAddress.state ||\n      !billingAddress.postal_code || !billingAddress.country ||\n      !recipientName || !nameOnCard\n    ) {\n      return;\n    }\n\n    apiInstance.post('/payments/create', {\n      amount: total * 100,\n      shipping: {\n        name: recipientName,\n        address: {\n          ...shippingAddress\n        }\n      }\n    }).then(({ data: clientSecret }) => {\n\n      stripe.createPaymentMethod({\n        type: 'card',\n        card: cardElement,\n        billing_details: {\n          name: nameOnCard,\n          address: {\n            ...billingAddress\n          }\n        }\n      }).then(({ paymentMethod }) => {\n\n        stripe.confirmCardPayment(clientSecret, {\n          payment_method: paymentMethod.id\n        })\n        .then(({ paymentIntent }) => {\n\n          const configOrder = {\n            orderTotal: total,\n            orderItems: cartItems.map(item => {\n              const { documentID, productThumbnail, productName,\n                productPrice, quantity } = item;\n\n              return {\n                documentID,\n                productThumbnail,\n                productName,\n                productPrice,\n                quantity\n              };\n            })\n          }\n\n          dispatch(\n            saveOrderHistory(configOrder)\n          );\n        });\n\n      })\n\n\n    });\n\n  };\n\n  const configCardElement = {\n    iconStyle: 'solid',\n    style: {\n      base: {\n        fontSize: '16px'\n      }\n    },\n    hidePostalCode: true\n  };\n\n  return (\n    <div className=\"paymentDetails\">\n      <form onSubmit={handleFormSubmit}>\n\n        <div className=\"group\">\n          <h2>\n            Shipping Address\n          </h2>\n\n          <FormInput\n            required\n            placeholder=\"Recipient Name\"\n            name=\"recipientName\"\n            handleChange={evt => setRecipientName(evt.target.value)}\n            value={recipientName}\n            type=\"text\"\n          />\n\n          <FormInput\n            required\n            placeholder=\"Line 1\"\n            name=\"line1\"\n            handleChange={evt => handleShipping(evt)}\n            value={shippingAddress.line1}\n            type=\"text\"\n          />\n\n          <FormInput\n            placeholder=\"Line 2\"\n            name=\"line2\"\n            handleChange={evt => handleShipping(evt)}\n            value={shippingAddress.line2}\n            type=\"text\"\n          />\n\n          <FormInput\n            required\n            placeholder=\"City\"\n            name=\"city\"\n            handleChange={evt => handleShipping(evt)}\n            value={shippingAddress.city}\n            type=\"text\"\n          />\n\n          <FormInput\n            required\n            placeholder=\"State\"\n            name=\"state\"\n            handleChange={evt => handleShipping(evt)}\n            value={shippingAddress.state}\n            type=\"text\"\n          />\n\n          <FormInput\n            required\n            placeholder=\"Postal Code\"\n            name=\"postal_code\"\n            handleChange={evt => handleShipping(evt)}\n            value={shippingAddress.postal_code}\n            type=\"text\"\n          />\n\n          <div className=\"formRow checkoutInput\">\n            <CountryDropdown\n              required\n              onChange={val => handleShipping({\n                target: {\n                  name: 'country',\n                  value: val\n                }\n              })}\n              value={shippingAddress.country}\n              valueType=\"short\"\n            />\n          </div>\n\n        </div>\n\n        <div className=\"group\">\n          <h2>\n            Billing Address\n          </h2>\n\n          <FormInput\n            required\n            placeholder=\"Name on Card\"\n            name=\"nameOnCard\"\n            handleChange={evt => setNameOnCard(evt.target.value)}\n            value={nameOnCard}\n            type=\"text\"\n          />\n\n          <FormInput\n            required\n            placeholder=\"Line 1\"\n            name=\"line1\"\n            handleChange={evt => handleBilling(evt)}\n            value={billingAddress.line1}\n            type=\"text\"\n          />\n\n          <FormInput\n            placeholder=\"Line 2\"\n            name=\"line2\"\n            handleChange={evt => handleBilling(evt)}\n            value={billingAddress.line2}\n            type=\"text\"\n          />\n\n          <FormInput\n            required\n            placeholder=\"City\"\n            name=\"city\"\n            handleChange={evt => handleBilling(evt)}\n            value={billingAddress.city}\n            type=\"text\"\n          />\n\n          <FormInput\n            required\n            placeholder=\"State\"\n            name=\"state\"\n            handleChange={evt => handleBilling(evt)}\n            value={billingAddress.state}\n            type=\"text\"\n          />\n\n          <FormInput\n            required\n            placeholder=\"Postal Code\"\n            name=\"postal_code\"\n            handleChange={evt => handleBilling(evt)}\n            value={billingAddress.postal_code}\n            type=\"text\"\n          />\n\n          <div className=\"formRow checkoutInput\">\n            <CountryDropdown\n              required\n              onChange={val => handleBilling({\n                target: {\n                  name: 'country',\n                  value: val\n                }\n              })}\n              value={billingAddress.country}\n              valueType=\"short\"\n            />\n          </div>\n\n        </div>\n\n        <div className=\"group\">\n          <h2>\n            Card Details\n          </h2>\n\n          <CardElement\n            options={configCardElement}\n          />\n        </div>\n\n        <Button\n          type=\"submit\"\n        >\n          Pay Now\n        </Button>\n\n      </form>\n    </div>\n  );\n}\n\nexport default PaymentDetails;\n"]},"metadata":{},"sourceType":"module"}